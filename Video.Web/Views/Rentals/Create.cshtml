@model Video.Domain.Entities.Rental;

@{
    ViewData["Title"] = "Rentals";

#pragma warning disable
}
<div class="d-flex justify-content-center p-3">
    <div class="card col-md-9 p-3">
        <div class="row pt-4 mb-3">
            <h2 class="text-primary ml-3">New Rental</h2>
        </div>
        <div class="row">
            <form id="rental">
                <div class="form-group mb-3">
                    <label asp-for="Customer" class="control-label"></label>
                    <div class="tt-container">
                        <input id="customer" class="form-control" required data-rule-validCustomer="true" minlength="3" name="customer" type="text" value="" placeholder="..." />
                    </div>
                </div>
                <div class="form-group mb-3">
                    <label asp-for="Movie" class="control-label"></label>
                    <div class="tt-container">
                        <input id="movie" class="form-control" data-rule-validMovie="true" name="movie" type="text" value="" placeholder="..." />
                    </div>
                </div>
                <ol id="movies" class="list-group list-group-numbered mb-3"></ol>

                <div class="form-group mt-3 row">
                    <div class="col-10">
                        <button class="btn btn-primary">Submit</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        <partial name="_ValidationScriptsPartial" />
    }
    <script>
        $(document).ready(function() {

            var viewModel = {
                movieIds: []
            };

            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace(['firstName', 'lastName']),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#customer').typeahead(
                {
                    hint: true,
                    minLength: 3,
                    highlight: true
                },
                {
                    name: 'customers',
                    display: function(data) {
                        return data.firstName + ' ' + data.lastName;
                    },
                    limit: 10,
                    source: customers
                }).on("typeahead:select", function(e, customer) {
                    viewModel.customerId = customer.id;
                });

            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#movie').typeahead(
                {
                    hint: true,
                    minLength: 3,
                    highlight: true
                },
                {
                    name: 'movies',
                    display: 'name',
                    source: movies
                }).on("typeahead:select", function(e, movie) {
                    $('#movies').append(`
                                        <li class='list-group-item d-flex justify-content-between align-items-start'>
                                            <div class='ms-2 me-auto'>
                                                <div class='fw-bold'>${movie.name}</div>
                                                <small class='text-muted'>${movie.genre.name}</small>
                                            </div>
                                            <span class='badge bg-secondary rounded-pill'>${Date.parse((movie.releaseDate)).toString('MM-dd-yyyy')} </span>
                                        </li>`
                    );

                    $("#movie").typeahead("val", "");
                    viewModel.movieIds.push(movie.id);
                });

            $.validator.addMethod("validCustomer", function() {
                return viewModel.customerId && viewModel.customerId != @Guid.Empty;
            }, "Please add a valid customer");

            $.validator.addMethod("validMovie", function() {
                return viewModel.movieIds.length > 0;
            }, "Please select at least one movie");

            $("#rental").validate({
                submitHandler: function() {
                    $.ajax({
                        url: "/api/rentals",
                        type: "POST",
                        contentType: "application/json",
                        dataType: 'json',
                        data: JSON.stringify(viewModel),
                        success: function(data) {
                            if (data) {
                                window.location.replace('/Rentals/Index');
                                toastr.success("Rentals successfully created.", { timeOut: 20000 });
                            }
                        },
                        error: function(xhr, ajaxOptions, thowError) {
                            if(xhr.status == 400 ){
                                toastr.error(xhr.responseText, { timeOut: 20000 });
                            }
                            else {
                             toastr.error("Something went wrong.", { timeOut: 20000 });
                            }
                        }
                    })
                }
            });
        });
    </script>
}